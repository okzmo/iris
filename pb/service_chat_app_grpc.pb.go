// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.2
// source: service_chat_app.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChatApp_CreateServer_FullMethodName = "/pb.ChatApp/CreateServer"
)

// ChatAppClient is the client API for ChatApp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatAppClient interface {
	CreateServer(ctx context.Context, in *CreateServerRequest, opts ...grpc.CallOption) (*CreateServerResponse, error)
}

type chatAppClient struct {
	cc grpc.ClientConnInterface
}

func NewChatAppClient(cc grpc.ClientConnInterface) ChatAppClient {
	return &chatAppClient{cc}
}

func (c *chatAppClient) CreateServer(ctx context.Context, in *CreateServerRequest, opts ...grpc.CallOption) (*CreateServerResponse, error) {
	out := new(CreateServerResponse)
	err := c.cc.Invoke(ctx, ChatApp_CreateServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatAppServer is the server API for ChatApp service.
// All implementations must embed UnimplementedChatAppServer
// for forward compatibility
type ChatAppServer interface {
	CreateServer(context.Context, *CreateServerRequest) (*CreateServerResponse, error)
	mustEmbedUnimplementedChatAppServer()
}

// UnimplementedChatAppServer must be embedded to have forward compatible implementations.
type UnimplementedChatAppServer struct {
}

func (UnimplementedChatAppServer) CreateServer(context.Context, *CreateServerRequest) (*CreateServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServer not implemented")
}
func (UnimplementedChatAppServer) mustEmbedUnimplementedChatAppServer() {}

// UnsafeChatAppServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatAppServer will
// result in compilation errors.
type UnsafeChatAppServer interface {
	mustEmbedUnimplementedChatAppServer()
}

func RegisterChatAppServer(s grpc.ServiceRegistrar, srv ChatAppServer) {
	s.RegisterService(&ChatApp_ServiceDesc, srv)
}

func _ChatApp_CreateServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatAppServer).CreateServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatApp_CreateServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatAppServer).CreateServer(ctx, req.(*CreateServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatApp_ServiceDesc is the grpc.ServiceDesc for ChatApp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatApp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ChatApp",
	HandlerType: (*ChatAppServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateServer",
			Handler:    _ChatApp_CreateServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_chat_app.proto",
}
